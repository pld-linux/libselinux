--- /dev/null	2003-09-15 09:40:47.000000000 -0400
+++ libselinux-1.4/src/getpeercon.c	2003-12-18 14:50:05.326101081 -0500
@@ -0,0 +1,45 @@
+#include <unistd.h>
+#include <fcntl.h>
+#include <string.h>
+#include <selinux/selinux.h>
+#include <stdlib.h>
+#include <errno.h>
+#include <sys/socket.h>
+#include "policy.h"
+
+#ifndef SO_PEERSEC
+#define SO_PEERSEC 31
+#endif
+
+int getpeercon(int fd, security_context_t *context)
+{
+	char *buf;
+	ssize_t size;
+	ssize_t ret;
+
+	size = INITCONTEXTLEN+1;
+	buf = malloc(size);
+	if (!buf) 
+		return -1;
+	memset(buf, 0, size);
+
+	ret = getsockopt(fd, SOL_SOCKET, SO_PEERSEC, buf, &size);
+	if (ret < 0 && errno == ERANGE) {
+		char *newbuf;
+
+		newbuf = realloc(buf, size);
+		if (!newbuf)
+			goto out;
+
+		buf = newbuf;
+		memset(buf, 0, size);
+		ret = getsockopt(fd, SOL_SOCKET, SO_PEERSEC, buf, &size);
+	}
+out:			
+	if (ret < 0)
+		free(buf);
+	else
+		*context = buf;
+	return ret;
+}
+  
--- libselinux-1.4/include/selinux/selinux.h.getpeercon	2003-12-18 14:48:39.670426250 -0500
+++ libselinux-1.4/include/selinux/selinux.h	2003-12-18 14:48:39.691423910 -0500
@@ -61,6 +61,13 @@
 extern int fsetfilecon(int fd, security_context_t con);
 
 
+/* Wrappers for the socket API */
+
+/* Get context of peer socket, and set *con to refer to it.
+   Caller must free via freecon. */
+extern int getpeercon(int fd, security_context_t *con);
+
+
 /* Wrappers for the selinuxfs (policy) API. */
 
 /* Mount point for selinuxfs. */
