--- libselinux-1.4/src/check_context.c.mntpoint	2003-04-29 17:09:21.000000000 -0400
+++ libselinux-1.4/src/check_context.c	2003-12-17 16:37:25.000000000 -0500
@@ -4,14 +4,18 @@
 #include <stdlib.h>
 #include <errno.h>
 #include <string.h>
+#include <stdio.h>
 #include <selinux/selinux.h>
 #include "policy.h"
+#include <limits.h>
 
 int security_check_context(security_context_t con)
 {
+	char path[PATH_MAX];
 	int fd, ret;
 
-	fd = open(SELINUXMNT "context", O_RDWR);
+	snprintf(path, sizeof path, "%s/context", selinux_mnt);
+	fd = open(path, O_RDWR);
 	if (fd < 0)
 		return -1;
 
--- libselinux-1.4/src/compute_av.c.mntpoint	2003-12-01 14:28:32.000000000 -0500
+++ libselinux-1.4/src/compute_av.c	2003-12-17 16:37:25.000000000 -0500
@@ -8,6 +8,7 @@
 #include <asm/page.h>
 #include <selinux/selinux.h>
 #include "policy.h"
+#include <limits.h>
 
 int security_compute_av(security_context_t scon,
 			security_context_t tcon,
@@ -15,11 +16,13 @@
 			access_vector_t requested,
 			struct av_decision *avd)
 {
+	char path[PATH_MAX];
 	char *buf;
 	size_t len;
 	int fd, ret;
 
-	fd = open(SELINUXMNT "access", O_RDWR);
+	snprintf(path, sizeof path, "%s/access", selinux_mnt);
+	fd = open(path, O_RDWR);
 	if (fd < 0) 
 		return -1;
 
--- libselinux-1.4/src/compute_create.c.mntpoint	2003-07-17 10:38:06.000000000 -0400
+++ libselinux-1.4/src/compute_create.c	2003-12-17 16:37:25.000000000 -0500
@@ -8,17 +8,20 @@
 #include <asm/page.h>
 #include <selinux/selinux.h>
 #include "policy.h"
+#include <limits.h>
 
 int security_compute_create(security_context_t scon,
 			    security_context_t tcon,
 			    security_class_t tclass,
 			    security_context_t *newcon)
 {
+	char path[PATH_MAX];
 	char *buf;
 	size_t size;
 	int fd, ret;
 
-	fd = open(SELINUXMNT "create", O_RDWR);
+	snprintf(path, sizeof path, "%s/create", selinux_mnt);
+	fd = open(path, O_RDWR);
 	if (fd < 0)
 		return -1;
 
--- libselinux-1.4/src/compute_relabel.c.mntpoint	2003-07-17 10:38:06.000000000 -0400
+++ libselinux-1.4/src/compute_relabel.c	2003-12-17 16:37:25.000000000 -0500
@@ -8,17 +8,20 @@
 #include <asm/page.h>
 #include <selinux/selinux.h>
 #include "policy.h"
+#include <limits.h>
 
 int security_compute_relabel(security_context_t scon,
 			    security_context_t tcon,
 			    security_class_t tclass,
 			    security_context_t *newcon)
 {
+	char path[PATH_MAX];
 	char *buf;
 	size_t size;
 	int fd, ret;
 
-	fd = open(SELINUXMNT "relabel", O_RDWR);
+	snprintf(path, sizeof path, "%s/relabel", selinux_mnt);
+	fd = open(path, O_RDWR);
 	if (fd < 0)
 		return -1;
 
--- libselinux-1.4/src/compute_user.c.mntpoint	2003-12-01 14:28:32.000000000 -0500
+++ libselinux-1.4/src/compute_user.c	2003-12-17 16:37:25.000000000 -0500
@@ -8,18 +8,21 @@
 #include <asm/page.h>
 #include <selinux/selinux.h>
 #include "policy.h"
+#include <limits.h>
 
 int security_compute_user(security_context_t scon,
 			  const char *user,
 			  security_context_t **con)
 {
+	char path[PATH_MAX];
 	char **ary;
 	char *buf, *ptr;
 	size_t size;
 	int fd, ret;
 	unsigned int i, nel;
 
-	fd = open(SELINUXMNT "user", O_RDWR);
+	snprintf(path, sizeof path, "%s/user", selinux_mnt);
+	fd = open(path, O_RDWR);
 	if (fd < 0)
 		return -1;
 
--- libselinux-1.4/src/getenforce.c.mntpoint	2003-10-21 15:40:40.000000000 -0400
+++ libselinux-1.4/src/getenforce.c	2003-12-17 16:37:25.000000000 -0500
@@ -7,13 +7,16 @@
 #include <selinux/selinux.h>
 #include "policy.h"
 #include <stdio.h>
+#include <limits.h>
 
 int security_getenforce(void)
 {
 	int fd, ret, enforce = 0;
+	char path[PATH_MAX];
 	char buf[20];
 
-	fd = open(SELINUXMNT "enforce", O_RDONLY);
+	snprintf(path, sizeof path, "%s/enforce", selinux_mnt);
+	fd = open(path, O_RDONLY);
 	if (fd < 0)
 		return -1;
 
--- /dev/null	2003-09-15 09:40:47.000000000 -0400
+++ libselinux-1.4/src/init.c	2003-12-17 17:53:47.486020784 -0500
@@ -0,0 +1,62 @@
+#include <unistd.h>
+#include <fcntl.h>
+#include <string.h>
+#include <selinux/selinux.h>
+#include <stdlib.h>
+#include <errno.h>
+#include <ctype.h>
+#include <asm/page.h>
+
+char *selinux_mnt = NULL;
+
+static void init_selinuxmnt(void) __attribute__ ((constructor));
+
+static void init_selinuxmnt(void)
+{
+	char *buf, *p;
+	size_t size;
+	int fd;
+	ssize_t ret;
+
+	if (selinux_mnt)
+		return;
+
+	fd = open("/proc/mounts", O_RDONLY);
+	if (fd < 0)
+		return;
+
+	size = PAGE_SIZE;
+	buf = malloc(size);
+	if (!buf)
+		goto out;
+		
+	memset(buf, 0, size);
+
+	ret = read(fd, buf, size - 1);
+	if (ret < 0)
+		goto out2;
+
+	p = strstr(buf, "selinuxfs");
+	if (!p)
+		goto out2;
+
+	p--;
+	*p = 0;
+	p--;
+
+	while (p > buf && !isspace(*p))
+		p--;
+
+	if (isspace(*p))
+		p++;
+
+	selinux_mnt = strdup(p);
+
+out2:
+	free(buf);
+out:
+	close(fd);
+	return;
+
+}
+ 
--- libselinux-1.4/src/load_policy.c.mntpoint	2003-04-29 17:09:21.000000000 -0400
+++ libselinux-1.4/src/load_policy.c	2003-12-17 16:37:25.000000000 -0500
@@ -2,15 +2,19 @@
 #include <sys/types.h>
 #include <fcntl.h>
 #include <stdlib.h>
+#include <stdio.h>
 #include <errno.h>
 #include <selinux/selinux.h>
 #include "policy.h"
+#include <limits.h>
 
 int security_load_policy(void *data, size_t len)
 {
+	char path[PATH_MAX];
 	int fd, ret;
 	
-	fd = open(SELINUXMNT "load", O_RDWR);
+	snprintf(path, sizeof path, "%s/load", selinux_mnt);
+	fd = open(path, O_RDWR);
 	if (fd < 0) 
 		return -1;
 
--- libselinux-1.4/src/policy.h.mntpoint	2003-10-21 15:40:40.000000000 -0400
+++ libselinux-1.4/src/policy.h	2003-12-17 16:37:25.000000000 -0500
@@ -9,6 +9,9 @@
 /* Initial length guess for getting contexts. */
 #define INITCONTEXTLEN 255
 
+/* selinuxfs mount point */
+extern char *selinux_mnt;
+
 #endif
 
 
--- libselinux-1.4/src/policyvers.c.mntpoint	2003-10-21 15:40:40.000000000 -0400
+++ libselinux-1.4/src/policyvers.c	2003-12-17 16:37:25.000000000 -0500
@@ -7,16 +7,19 @@
 #include <selinux/selinux.h>
 #include <stdio.h>
 #include "policy.h"
+#include <limits.h>
 
 #define DEFAULT_POLICY_VERSION 15
 
 int security_policyvers(void)
 {
 	int fd, ret;
+	char path[PATH_MAX];
 	char buf[20];
 	unsigned vers = DEFAULT_POLICY_VERSION;
 
-	fd = open(SELINUXMNT "policyvers", O_RDONLY);
+	snprintf(path, sizeof path, "%s/policyvers", selinux_mnt);
+	fd = open(path, O_RDONLY);
 	if (fd < 0)
 		return vers;
 	memset(buf, 0, sizeof buf);
--- libselinux-1.4/src/setenforce.c.mntpoint	2003-10-21 15:40:40.000000000 -0400
+++ libselinux-1.4/src/setenforce.c	2003-12-17 16:37:25.000000000 -0500
@@ -7,13 +7,16 @@
 #include <selinux/selinux.h>
 #include "policy.h"
 #include <stdio.h>
+#include <limits.h>
 
 int security_setenforce(int value)
 {
 	int fd, ret;
+	char path[PATH_MAX];
 	char buf[20];
 
-	fd = open(SELINUXMNT "enforce", O_RDWR);
+	snprintf(path, sizeof path, "%s/enforce", selinux_mnt);
+	fd = open(path, O_RDWR);
 	if (fd < 0)
 		return -1;
 
--- libselinux-1.4/src/enabled.c.mntpoint	2003-11-20 09:28:38.000000000 -0500
+++ libselinux-1.4/src/enabled.c	2003-12-17 16:37:25.000000000 -0500
@@ -17,18 +17,22 @@
 
 	fd = open("/proc/filesystems", O_RDONLY);
 	if (fd < 0)
-		return 0;
+		return -1;
 
 	size = PAGE_SIZE;
 	buf = malloc(size);
-	if (!buf)
+	if (!buf) {
+		enabled = -1;
 		goto out;
+	}
 		
 	memset(buf, 0, size);
 
 	ret = read(fd, buf, size - 1);
-	if (ret < 0)
+	if (ret < 0) {
+		enabled = -1;
 		goto out2;
+	}
 
 	if (!strstr(buf, "selinuxfs"))
 		goto out2;
--- libselinux-1.4/include/selinux/selinux.h.mntpoint	2003-12-17 17:09:17.000000000 -0500
+++ libselinux-1.4/include/selinux/selinux.h	2003-12-17 17:09:43.000000000 -0500
@@ -122,6 +122,7 @@
 /* Get the policy version number. */
 extern int security_policyvers(void);
 
+extern void reinit_selinuxmnt(void);
 
 /* Common helpers */
 
